<?php
declare(strict_types=1);

namespace SixShop\core;

use Composer\Autoload\ClassLoader;
use SixShop\core\Exception\ExceptionHandle;
use SixShop\core\Service\AutoloadService;
use SixShop\core\Service\CommandService;
use SixShop\core\Service\HookAttributeService;
use SixShop\core\Service\RegisterRouteService;
use think\App;
use think\exception\Handle;

/**
 * @property ClassLoader $classLoader
 */
class SixShopKernel extends App
{
    /**
     * 扩展目录
     */
    protected string $extensionPath = '';

    protected array $initializerServices = [
        AutoloadService::class,
        RegisterRouteService::class,
        HookAttributeService::class,
    ];

    private array $moduleNameList = [];

    public function __construct(ClassLoader $classLoader, string $environment = '', string $rootPath = '')
    {
        parent::__construct($rootPath);
        if ($environment === '') {
            $environment = getenv('RUNTIME_ENVIRONMENT') ?: '';
            if (getenv('IS_DDEV_PROJECT') == 'true') {
                $environment = 'ddev';
            }
        }
        $this->setEnvName($environment);
        $this->bind('think\Request', Request::class);
        $this->instance('classLoader', $classLoader);
        $this->extensionPath = $this->rootPath . 'extension' . DIRECTORY_SEPARATOR; // todo config
        $this->initializers = array_merge($this->initializers, $this->initializerServices);
    }

    public function runHttp(): void
    {
        $this->bind(Handle::class, ExceptionHandle::class);
        $response = $this->http->run();
        $response->send();
        $this->http->end($response);
    }

    public function getExtensionPath(): string
    {
        return $this->extensionPath;
    }

    public function runConsole(): int
    {
        $this->initializers[] = CommandService::class;
        return $this->initialize()->console->run();
    }

    public function getEnvName(): string
    {
        return $this->envName;
    }

    public function getModuleNameList(): array
    {
        if (empty($this->moduleNameList)) {
            $coreFile = $this->rootPath . 'runtime/module_name_list_core.php';
            if (file_exists($coreFile)) {
                $this->moduleNameList = require $coreFile;
            } else {
                $moduleInfoList = [];
                $extensionDirs = array_diff(scandir($this->extensionPath), ['.', '..']);
                foreach ($extensionDirs as $item) {
                    if (!is_dir($this->extensionPath . $item)) {
                        continue;
                    }
                    $infoFile = $this->extensionPath . $item . '/info.php';
                    if (is_file($infoFile)) {
                        $info = require $infoFile;
                        $info['weight'] = $info['weight'] ?? 10000;
                        if ($info['is_core'] ?? false) {
                            $this->moduleNameList[] = $info['id'];
                            $moduleInfoList[] = $info;
                        }
                    }
                }
                usort($moduleInfoList, function ($a, $b) {
                    return $a['weight'] <=> $b['weight'];
                });
                $header = '// This file is automatically generated at:' . date('Y-m-d H:i:s') . PHP_EOL . 'declare (strict_types = 1);' . PHP_EOL;
                $content = '<?php ' . PHP_EOL . $header . "return " . var_export(array_column($moduleInfoList, 'id'), true) . ';';
                file_put_contents($coreFile, $content);
            }
            $normalFile = $this->rootPath . 'runtime/module_name_list_normal.php';
            if (file_exists($normalFile)) {
                $this->moduleNameList = array_merge($this->moduleNameList, require $normalFile);
            }
        }
        return $this->moduleNameList;
    }

    public function loadEnv(string $envName = ''): void
    {
        $home = getenv('HOME');
        $envFile = $envName ? $home . '/.env.' . $envName : $home . '/.env';
        if (is_file($envFile)) {
            $this->env->load($envFile);
            return;
        }
        parent::loadEnv($envName);
    }
}