<?php
declare(strict_types=1);

namespace SixShop\Core\Service;

use Composer\InstalledVersions;
use Composer\Json\JsonFile;
use SixShop\Core\Exception\ExceptionHandle;
use SixShop\Core\Helper;
use SixShop\Core\Plugin;
use SixShop\Core\Request;
use think\event\HttpRun;
use think\exception\Handle;
use think\facade\Event;
use think\Service;

class CoreService extends Service
{
    public static string $extensionPath;

    /**
     * @var array<string, array{name:string}>
     */
    public static array $extensionComposerMap = [];

    /* @deprecated */
    public static array $extensionNameList = [];

    private static array $normalExtensionNameList = [];

    public function register(): void
    {
        $this->app->bind(Handle::class, ExceptionHandle::class);
        $this->app->bind('think\Request', Request::class);
        $this->app->bind('classLoader',
            require $this->app->getRootPath() . 'vendor/autoload.php');
        self::$extensionPath = $this->app->getRootPath() . 'extension' . DIRECTORY_SEPARATOR;
        $this->initExtensionList();
        $this->compatibleExtensionNameList();
    }

    public function boot(): void
    {
        $this->app->make(AutoloadService::class)->load(self::$extensionComposerMap,self::$normalExtensionNameList);
        $this->app->make(HookAttributeService::class)->init();
        $this->app->event->trigger('hook_init', $this->app);
        $this->app->event->listen(HttpRun::class, function () {
            $this->registerRoutes($this->app->make(RegisterRouteService::class)->init());
        });

        $this->app->make(CommandService::class)->init(function ($commands) {
            $this->commands($commands);
        });
    }

    private function initExtensionList(): void
    {
        if (!empty(self::$extensionComposerMap)) {
            return;
        }
        $runtimePath = $this->app->getRootPath() . 'runtime/';
        $reference = Plugin::getInstalledSixShopExtensions()['root']['reference'];
        $extensionComposerFile = $runtimePath . 'extension_' .$reference.'.php';
        if (file_exists($extensionComposerFile)) {
            self::$extensionComposerMap = require $extensionComposerFile;
            return;
        }
        $files = array_diff(scandir($runtimePath), ['.', '..']);
        foreach ($files as $file) {
            if (strpos($file, 'extension_') === 0 && substr($file, -4) === '.php') {
                unlink($runtimePath . $file);
            }
        }
        foreach (InstalledVersions::getInstalledPackagesByType(Plugin::EXTENSION_TYPE) as $item) {
            $installPath = InstalledVersions::getInstallPath($item);
            $composerJson = new JsonFile($installPath . '/composer.json');
            $composer = $composerJson->read();
            $extensionID = $composer['extra']['sixshop']['id'];
            self::$extensionComposerMap[$extensionID] = $composer;
        };
        $header = '// This file is automatically generated at:' . date('Y-m-d H:i:s') . PHP_EOL . 'declare (strict_types = 1);' . PHP_EOL;
        $content = '<?php ' . PHP_EOL . $header . "return " . var_export(self::$extensionComposerMap, true) . ';';
        file_put_contents($extensionComposerFile, $content);
    }

    /* @deprecated */
    private function compatibleExtensionNameList(): void
    {
        if (empty(self::$extensionNameList)) {
            self::$extensionNameList = array_keys(self::$extensionComposerMap);
            $normalFile = $this->app->getRootPath() . 'runtime/module_name_list_normal.php';
            if (file_exists($normalFile)) {
                $normalExtensionList = require $normalFile;
                foreach ($normalExtensionList as $item) {
                    if (array_key_exists($item, self::$extensionComposerMap)) {
                        continue;
                    }
                    if (is_dir( Helper::extension_path($item).'src')) {
                        self::$extensionNameList[] = $item;
                        self::$normalExtensionNameList[] = $item;
                    }
                }
            }
        }
    }
}